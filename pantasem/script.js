const DEFAULT_TRAITS=[{key:"Character",placeholder:"e.g., Whale",include:!0,weird:!1},{key:"Body Type",placeholder:"e.g., Normal, Slim, Heavy",include:!0,weird:!1},{key:"Skin Color",placeholder:"e.g., Black, Blue, Tan",include:!0,weird:!1},{key:"Headwear",placeholder:"e.g., Chef hat, Beanie, Crown",include:!0,weird:!1},{key:"Mask",placeholder:"e.g., Oni mask, Gas mask, Kitsune, Menpo",include:!0,weird:!1},{key:"Hair",placeholder:"e.g., Black short hair, Bald",include:!0,weird:!1},{key:"Outfit",placeholder:"e.g., Chef outfit, Hoodie",include:!0,weird:!1},{key:"Back",placeholder:"e.g., Backpack, Cape, Wings",include:!0,weird:!1},{key:"Eyes",placeholder:"e.g., Angry, Calm, Laser",include:!0,weird:!1},{key:"Mouth",placeholder:"e.g., Smiling, Rose in mouth, Pipe, Leaf",include:!0,weird:!1},{key:"Accessories",placeholder:"e.g., Earring, Glasses",include:!0,weird:!1},{key:"Pose",placeholder:"e.g., Front view portrait",include:!0,weird:!1},{key:"Background Color",placeholder:"e.g., Gray, Gradient purple",include:!0,weird:!1}],SUGGESTIONS={Character:["Whale","Shark","Cat","Alien","Robot","Dragon","Bear","Fox","Wolf","Tiger","Panda","Penguin","Octopus","Knight","Wizard","Ninja","Pirate","Monkey","Doge","Ape","Bunny","Zombie","Vampire","Elf","Dwarf","Ghost","Skeleton","Golem","Gryphon","Phoenix","Unicorn","Mermaid","Goblin","Orc","Fairy","Cyborg","Astronaut","Cowboy","Samurai","Otter","Elephant","Giraffe","Koala","Raccoon","Pigeon","Frog","Koifish","Peasant","Squire","Bard","Monk","Crusader","Archer","Jester","Herald","Blacksmith","Alchemist","Plague Doctor","King","Queen","Prince","Princess","Noble","Merchant","Innkeeper","Templar","Paladin","Ranger","Minotaur","Centaur","Harpy","Time traveler","Street samurai","Space marine","Mech pilot"],"Body Type":["Slime","Normal","Skeleton","Zombie","Alien","Ghost","Void","Diamond","Mutant","Demon","Angelic","Android","Mecha","Hologram","Fire","Ice","Clay","Toxic","Water","Lightning","Crystal","Shadow","Light","Plasma"],"Skin Color":["Black","Blue","Teal","White","Gold","Silver","Neon","Pastel pink","Crimson","Jade","Bronze","Charcoal","Ivory","Emerald","Sapphire","Ruby","Copper","Rose gold","Slate","Pearl","Pastel mint","Pastel peach","Rainbow gradient","Gradient sunset","Iridescent","Translucent"],Headwear:["Chef hat","Beanie","Crown","Headband","Top hat","Visor","Bandana","Baseball cap","Fedora","Helmet","Viking helmet","Sombrero","Goggles","Halo","Horns","Laurel wreath","Bucket hat","Beret","Cowboy hat","Ushanka","None","Coif","Sallet helmet","Bascinet","Barbute","Kettle hat","Hennin","Wimple","Circlet","Feathered cap","Wide-brim hat","Newsboy cap","Snapback","Trilby","Sun hat","Fascinator","Headscarf"],Mask:["Gas mask","Respirator","Full-face respirator","Rebreather","Hazmat mask","Plague doctor mask","Oni mask","Hannya mask","Kitsune mask","Tengu mask","Noh mask","Samurai menpo","Kabuto face guard","Kendo men","Yokai mask","Demon mask","Skull mask","Half skull mask","Balaclava","Ski mask","Tactical mask","Ballistic mask","SWAT mask","Hockey mask","Goalie mask","Jason mask","Paintball mask","Airsoft mask","Ninja mask","Bandana face mask","Shemagh wrap","None"],Hair:["Black short hair","White long hair","Pink mohawk","Bald","Curly brown hair","Buzz cut","Ponytail","Dreadlocks","Afro","Undercut","Spiky blue hair","Braids","Pink bob","Silver slicked back","Green tips","Ombre hair","Space buns","Long wavy blonde","Short curly red","Side shave","Curtain bangs","Wolf cut"],Outfit:["Chef outfit","Spacesuit","Samurai armor","Hoodie","Business suit","Streetwear","black suit","tuxedo","leather jacket","tracksuit","robe","casual tee and jeans","military uniform","Trench coat","Kimono","Sports jersey","Cyber armor","Overcoat","Denim jacket","Bomber jacket","Lab coat","Pilot suit","Medieval tunic","Wizard robe","Ninja gi","Pirate coat","Astronaut suit","Hazmat suit","Steampunk attire","Tactical vest","Raincoat","Puffer jacket","Overalls","Knight armor","Chainmail hauberk"],Back:["Backpack","Cape","Wings","Quiver","Shield","Skateboard","Guitar","Katana sheath","Banner flag","None","Magic staff","Hoverboard","Back bling","Parrot","Backpack with gadgets"],Eyes:["Angry","Calm","Glowing","Laser","Wink","Closed","Bitcoin Pupils","Dollar Pupils","1 Eye Scar","Glowing blue","Heterochromia","Starry eyes","Heart Pupils","X-eyes","Diamond Pupils","Galaxy Eyes"],Mouth:["Smiling","Frown","Open","Grin","Neutral","Smirk","Tongue out","Gritted teeth","Cigar","Fanged grin","Open smile","Pout","Mask","Toothpick","Gold grill","Bubble gum bubble","Rose in mouth","Pipe","Leaf in mouth","Wheat stem"],Accessories:["Earring","Glasses","Necklace","Bracelet","Headphones","Ring","Watch","Chain","Nose ring","Piercings","Armband","Scarf","Necktie","Bowtie","Pins","Bracelets","Gloves","Bandages","Tattoo","Arm tattoo","Anklet","None"],Pose:["Front view portrait","Portrait slightly facing left","Portrait slightly facing right","Side view (profile) left","Side view (profile) right","3/4 view left (common in anime style)","3/4 view right","Looking upward (heroic look)","Looking downward (mysterious pose)","Over-the-shoulder look","(Customized)"],"Background Color":["Gray","Gradient purple","Pastel blue","Neon green","Warm orange","Deep navy","Lavender","Teal gradient","Sunset gradient","Nebula","Pastel mint","Pastel peach","Dark gradient","City skyline","Retro sun","Aurora","Galaxy","Smoke"],additionaltraits:["neon rim light","cyberpunk glow","vaporwave palette","holographic sheen","toon-shaded","pixel highlights","gold foil sparkle","misty fog","studio softbox lighting","bokeh background","specular highlights","ambient occlusion","global illumination","film grain","tilt-shift","depth of field","anamorphic bokeh","lens flare","cinematic color grading","HDR","8k resolution"]},WEIRD_SUGGESTIONS={Character:["Glitch entity","Headless knight","Shadow with eyes","Mannequin come alive","Pixelated ghost","Melted wax figure","Marionette puppet","Hollow suit","Faceless noble","Eyeball beast"],"Body Type":["Liquid slime with bones","Crystalline fractal body","Glitched segmented body","Smoke silhouette","Inflatable vinyl body","Porcelain cracked body","Vines and thorns body"],"Skin Color":["Oil-slick rainbow","Static TV noise","Moldy moss","Cracked lava","Transparent jelly","Galaxy void","Rust patina"],Headwear:["Crown of living snakes","Floating halo of eyes","Paper bag head","Bird nest hat","Teacup hat","Miniature house","Upside-down cap"],Mask:["Porcelain doll mask","Gas mask with flowers","CRT TV screen mask","Mirror shard mask","Mosaic faceplate","Tape-wrapped face"],Hair:["Hair made of flames","Noodle hair","Glitch pixel hair","Cloud puff hair","Vine and flower hair","Tentacle hair","Wireframe hair"],Outfit:["Mismatched armor pieces","Inside-out tuxedo","Patchwork quilt coat","Hazmat ballgown","Origami paper suit","Transparent raincoat of confetti","Caution tape outfit"],Back:["Mechanical spine","Jar of eyeballs","Cuckoo clock","Floating radio","Backpack of whispering books","Paper wings","Neon cable bundle"],Eyes:["Cyclops","Crying blood","Button eyes","Empty sockets with light","Spiral hypnosis eyes","Upside-down eyes","Stitched eyelids (closed)","Starry void eyes","Glitch scanline eyes"],Mouth:["Zipper mouth","Stitched mouth","Too-wide jagged smile","Black void mouth","Detachable mouth","Incense smoke mouth","Clockwork teeth"],Accessories:["Floating magnets halo","Key to nowhere","Glove with eyes","Umbrella indoors","Broken pocketwatch","Rune stones","Tangled earphones","Compass that spins"],"Background Color":["Glitch grid","Static noise","Endless hallway","Escher stairs","Rotating halo pattern","Ink spill gradient","Old CRT scanlines","Fractal swirl"],additionaltraits:["datamosh glitch","vhs tracking lines","film burn edges","dolly zoom feel","fisheye warp","long exposure streaks","afterimage ghosting","double exposure","ink bleed edges","surreal color shift"]},PLAIN_BACKGROUNDS=["plain pastel light blue","plain baby blue","plain powder blue","plain pastel mint","plain mint green","plain pistachio","plain sage","plain seafoam","plain pastel turquoise","plain pastel cyan","plain pastel pink","plain blush pink","plain rose","plain mauve","plain lavender","plain lilac","plain periwinkle","plain orchid","plain pastel peach","plain apricot","plain salmon","plain coral","plain butter yellow","plain lemon","plain pale gold","plain champagne","plain cream","plain ivory","plain off-white","plain beige","plain sand","plain tan","plain khaki","plain taupe","plain pistachio green","plain pastel lime","plain pale green","plain dusty rose","plain terracotta light","plain pastel orange","plain pastel violet","plain pastel magenta","plain pastel red","plain mint cream","plain honeydew","plain seashell","plain linen"],qs=(e,a=document)=>a.querySelector(e),qsa=(e,a=document)=>Array.from(a.querySelectorAll(e)),TRAIT_USAGE={},normNameKey=e=>String(e||"").toLowerCase(),normValueKey=e=>String(e||"").toLowerCase().trim(),storage={get(e,a){try{const t=localStorage.getItem(e);return null===t?a:JSON.parse(t)}catch{return a}},set(e,a){try{localStorage.setItem(e,JSON.stringify(a))}catch{}}};function uniqueArray(e){const a=new Set,t=[];for(const o of e||[]){const e=normValueKey(o);a.has(e)||(a.add(e),t.push(o))}return t}function getCombinedSuggestions(e){const a=e in SUGGESTIONS?e:(e||"").toLowerCase()in SUGGESTIONS?(e||"").toLowerCase():null;return uniqueArray(a?SUGGESTIONS[a]:[])}function getWeirdSuggestions(e){const a=e in WEIRD_SUGGESTIONS?e:(e||"").toLowerCase()in WEIRD_SUGGESTIONS?(e||"").toLowerCase():null;return uniqueArray(a?WEIRD_SUGGESTIONS[a]:[])}function recordTraitUsage(e,a){const t=normNameKey(e),o=normValueKey(a);t&&o&&(TRAIT_USAGE[t]=TRAIT_USAGE[t]||{},TRAIT_USAGE[t][o]=(TRAIT_USAGE[t][o]||0)+1)}function pickWeighted(e,a){const t=(a||[]).reduce((e,a)=>e+a,0)||0;let o=Math.random()*(t||1);for(let t=0;t<e.length;t++)if(o-=a[t],o<=0)return e[t];return e[e.length-1]}function pickDiverse(e,a){const t=TRAIT_USAGE[normNameKey(e)]||{};return pickWeighted(a,(a||[]).map(e=>1/(1+(t[normValueKey(e)]||0))))}function sampleFromPool(e,a,t=6){const o=Array.isArray(a)?a.slice():[],n=[],r=new Set;for(;n.length<Math.min(t,o.length);){const a=pickDiverse(e,o),t=normValueKey(a);r.has(t)||(r.add(t),n.push(a))}return n}function renderSuggestionsForRow(e){try{const a=qs('[data-key="name"]',e).textContent.trim(),t=qs(".trait-value",e),o=qs('[data-sug="combined"]',e),n=!!qs(".trait-weird",e)?.checked?getWeirdSuggestions(a):getCombinedSuggestions(a);if(!o)return;o.innerHTML="";for(const e of sampleFromPool(a,n,6)){const a=document.createElement("button");a.type="button",a.className="chip",a.textContent=e,a.addEventListener("click",()=>{t.value=e}),o.appendChild(a)}const r=qs("[data-suggestions]",e);r&&(r.style.display=n.length?"":"none")}catch{}}function makeTraitRow({key:e,include:a=!0,value:t="",placeholder:o="",weird:n=!1}){const r=document.createElement("div");r.className="trait",r.dataset.row="trait",r.innerHTML=`\n    <div class="top">\n      <div class="left">\n        <input type="checkbox" class="trait-include" ${a?"checked":""} title="Include this trait" />\n        <label class="trait-name label" data-key="name">${e}</label>\n        <label class="badge"><input type="checkbox" class="trait-weird" ${n?"checked":""}/> WEIRD</label>\n        <button class="btn small" data-action="rename" title="Rename trait">Rename</button>\n      </div>\n      <div class="badge">Included: <span class="include-state">${a?"Yes":"No"}</span></div>\n    </div>\n    <div class="right">\n      <input type="text" class="trait-value" placeholder="${o||"Enter value..."}" value="${t||""}" />\n      <button class="btn small" data-action="shuffle" title="Shuffle suggestions">Suggest</button>\n    </div>\n    <div class="suggestions" data-suggestions>\n      <div class="chips" data-sug="combined"></div>\n    </div>\n  `;const i=qs(".trait-include",r),s=qs(".include-state",r);return i.addEventListener("change",()=>{s.textContent=i.checked?"Yes":"No"}),qs('[data-action="rename"]',r).addEventListener("click",()=>{const e=qs('[data-key="name"]',r),a=prompt("Enter new trait name:",e.textContent.trim());a&&a.trim()&&(e.textContent=a.trim(),qs(".trait-value",r).placeholder=SUGGESTIONS[a]?.[0]||"Enter value...",renderSuggestionsForRow(r))}),qs('[data-action="shuffle"]',r).addEventListener("click",()=>renderSuggestionsForRow(r)),qs(".trait-weird",r)?.addEventListener("change",()=>renderSuggestionsForRow(r)),renderSuggestionsForRow(r),r}function renderDefaultTraits(){const e=qs("#traits");e.innerHTML="";const a=storage.get("traitsData",null);let t=a&&Array.isArray(a)?a:DEFAULT_TRAITS;Array.isArray(t)&&!t.some(e=>"Pose"===(e.key||e.name))&&(t=[...t,{key:"Pose",placeholder:"e.g., Front view portrait",include:!0,weird:!1}]);for(const a of t)e.appendChild(makeTraitRow(a))}function collectTraits(){const e=qs("#traits"),a=qsa('[data-row="trait"]',e),t=[];for(const e of a){const a=!!qs(".trait-include",e)?.checked,o=!!qs(".trait-weird",e)?.checked,n=qs('[data-key="name"]',e).textContent.trim(),r=qs(".trait-value",e).value.trim();t.push({name:n,value:r,include:a,weird:o})}return storage.set("traitsData",t.map(e=>({key:e.name,placeholder:"",include:e.include,weird:!!e.weird}))),t}function fillExample(e=!1){const a=qs("#traits");a.innerHTML="";const t=[{key:"Character",value:"Whale",include:!0},{key:"Body Type",value:"normal",include:!0},{key:"Skin Color",value:"black",include:!0},{key:"Headwear",value:"chef hat",include:!0},{key:"Hair",value:"black short hair",include:!0},{key:"Outfit",value:"chef outfit",include:!0},{key:"Back",value:"backpack",include:!0},{key:"Eyes",value:"Angry",include:!0},{key:"Mouth",value:"Smiling",include:!0},{key:"Accessories",value:"earring",include:!0},{key:"Pose",value:"Front view portrait",include:!0},{key:"Background Color",value:"gray",include:!0}];for(const e of t)a.appendChild(makeTraitRow(e));e&&a.appendChild(makeTraitRow({key:"additionaltraits",value:"random",include:!0,weird:!1}))}const HAIR_COLOR_PREFIXES=["Black","Brown","Dark brown","Light brown","Blonde","Platinum blonde","Dirty blonde","Red","Auburn","Ginger","Copper","Burgundy","Mahogany","White","Grey","Silver","Blue","Navy blue","Sky blue","Teal","Turquoise","Cyan","Green","Mint green","Emerald","Pink","Hot pink","Pastel pink","Rose gold","Purple","Violet","Lavender","Magenta","Orange","Peach","Gold","Golden"],HAIR_COLOR_HINTS=["black","brown","blonde","platinum","dirty blonde","red","auburn","ginger","copper","burgundy","mahogany","white","grey","gray","silver","gold","golden","blue","navy","sky blue","teal","turquoise","cyan","green","mint","emerald","pink","rose gold","magenta","purple","violet","lavender","orange","peach","rainbow","two-tone","balayage","ombre","bleached","bleach"];function hairHasColor(e){const a=String(e||"").toLowerCase();return HAIR_COLOR_HINTS.some(e=>a.includes(e))}function ensureHairColor(e){const a=String(e||"").trim(),t=a.toLowerCase();if(!a)return a;if("none"===t||t.includes("bald"))return a;if(hairHasColor(a))return a;return`${pickDiverse("hair color",HAIR_COLOR_PREFIXES)} ${a}`}function maybeRandomizeValue(e,a,t=!1){const o=(a||"").trim();if(o&&"random"!==o.toLowerCase())return a;if(t){const a=getWeirdSuggestions(e);if(a.length)return pickDiverse(e,a)}const n=String(e||"").toLowerCase();if(("background color"===n||"background"===n)&&PLAIN_BACKGROUNDS.length)return pickDiverse(e,PLAIN_BACKGROUNDS);if("hair"===n){const a=getCombinedSuggestions(e);return ensureHairColor(a.length?pickDiverse(e,a):"short hair")}const r=getCombinedSuggestions(e);if(r.length)return pickDiverse(e,r);return pickDiverse(e,["metallic","matte","glossy","holographic","pastel","neon","textured","retro","modern","minimalist"])}function fillTraitsHeuristic(e){return e.map(e=>{const a=(e.value||"").trim();return e.include?a&&"random"!==a.toLowerCase()?{...e}:{...e,value:maybeRandomizeValue(e.name,"random",!!e.weird)}:{...e}})}function prefillMissingTraits(e){const a=e.map(e=>({...e})),t={};for(let e=0;e<a.length;e++){const o=a[e];if(!o.include)continue;const n=(o.value||"").trim();if(!n||"random"===n.toLowerCase()){const n=maybeRandomizeValue(o.name,"random",!!o.weird);a[e].value=n,t[o.name]=n}}return{traits:a,filledMap:t}}function enforceMaskRule(e,a=!1){try{const t=e.find(e=>e.name&&"mask"===e.name.toLowerCase());if(!t)return e;const o=(t.value||"").trim().toLowerCase();if(!(o&&"none"!==o&&"no mask"!==o&&"random"!==o))return e;const n=t=>{const o=e.find(e=>e.name&&e.name.toLowerCase()===t);if(o&&(o.value="NONE",o.include=!0,a)){const e=qsa('[data-row="trait"]');for(const a of e){if(qs('[data-key="name"]',a).textContent.trim().toLowerCase()===t){const e=qs(".trait-value",a);e&&(e.value="NONE");const t=qs(".trait-include",a);if(t&&!t.checked){t.checked=!0;const e=qs(".include-state",a);e&&(e.textContent="Yes")}}}}};n("eyes"),n("mouth")}catch{}return e}function generateSinglePrompt(e){const a=e.filter(e=>e.include&&e.value);if(!a.length)return"No traits selected.";const t=Object.fromEntries(a.map(e=>[e.name.toLowerCase(),e.value])),o=[];t.character&&o.push(`${t.character}`),t["body type"]&&o.push(`${t["body type"]} body type`),t["skin color"]&&o.push(`${t["skin color"]} skin`),t.headwear&&"none"!==String(t.headwear).trim().toLowerCase()&&o.push(`wearing ${t.headwear}`),t.hair&&o.push(t.hair),t.outfit&&o.push(t.outfit),t.back&&o.push(`back: ${t.back}`),t.eyes&&o.push(`eyes: ${t.eyes}`),t.mouth&&o.push(`mouth: ${t.mouth}`),t.accessories&&o.push(`accessories: ${t.accessories}`),t["background color"]&&o.push(`background color: ${t["background color"]}`);for(const e of a){const a=e.name.toLowerCase();["character","body type","skin color","headwear","hair","outfit","back","eyes","mouth","accessories","background color"].includes(a)||o.push(`${e.name}: ${e.value}`)}return o.join(", ")}const normalizePrompt=e=>String(e||"").toLowerCase().replace(/\s+/g," ").trim(),UNIQUE={styles:["comic-book ink","cel shaded","oil painting","watercolor wash","pixel art","low-poly 3D","isometric","line engraving","chalk pastel","marker sketch","vector flat","airbrushed","grunge texture","sticker style","holographic foil"],moods:["epic","whimsical","serene","ominous","playful","mysterious","energetic","dreamlike","noir","retro","futuristic","vaporwave","cyberpunk"],lighting:["rim light","softbox key","backlit glow","neon fill","warm sunset","cool moonlight","studio 3-point","volumetric rays","top-down hard light","bounce-lit"],camera:["portrait framing","medium shot","close-up","Dutch angle","wide angle","telephoto compression","eye-level","low-angle hero shot"],materials:["matte finish","glossy highlights","metallic sheen","soft fabric","brushed steel","porcelain glaze","velvet"],backgrounds:["gradient wash","graphic pattern","paper texture","bokeh orbs","abstract shapes","radial burst","halftone dots"],render:["high detail","clean composition","subtle shading","sharp lineart","smooth anti-alias","color-graded","film grain"]},pick=e=>e[Math.floor(Math.random()*e.length)];function pickN(e,a){const t=e.slice(),o=[];for(let e=0;e<a&&t.length;e++)o.push(t.splice(Math.floor(Math.random()*t.length),1)[0]);return o}function buildUniquenessCue(){const e=[];return e.push(...pickN(UNIQUE.styles,1)),e.push(...pickN(UNIQUE.moods,1)),e.push(...pickN(UNIQUE.lighting,1)),Math.random()<.6&&e.push(pick(UNIQUE.camera)),Math.random()<.6&&e.push(pick(UNIQUE.materials)),Math.random()<.6&&e.push(pick(UNIQUE.backgrounds)),e.push(pick(UNIQUE.render)),e.join(", ")}function loadSettings(){const e=qs("#api-base")?.value?.trim()||"https://openrouter.ai/api/v1",a=qs("#api-key")?.value?.trim()||"",t=qs("#api-model")?.value?.trim()||"google/gemini-2.5-flash-lite-preview-09-2025",o=Math.max(1,Math.min(8,parseInt(qs("#concurrency")?.value||"3",10))),n=!!qs("#use-ai")?.checked,r=!!qs("#allow-fallback")?.checked,i=!!qs("#randomize-random")?.checked,s=qs("#decouple-traits")?.checked??!0;return storage.set("settings",{apiBase:e,model:t,concurrency:o,useAI:n,allowFallback:r,randomizeRandom:i,decoupleTraits:s,hasKey:!!a}),{apiBase:e,apiKey:a,model:t,concurrency:o,useAI:n,allowFallback:r,randomizeRandom:i,decoupleTraits:s}}function restoreSettings(){const e=storage.get("settings",null);if(!e)return;qs("#api-base")&&(qs("#api-base").value=e.apiBase||"https://openrouter.ai/api/v1"),qs("#api-model")&&(qs("#api-model").value=e.model||"google/gemini-2.5-flash-lite-preview-09-2025"),qs("#concurrency")&&(qs("#concurrency").value=e.concurrency||3),qs("#use-ai")&&(qs("#use-ai").checked=!!e.useAI),qs("#allow-fallback")&&(qs("#allow-fallback").checked=!!e.allowFallback),qs("#randomize-random")&&(qs("#randomize-random").checked=e.randomizeRandom??!0);const a=qs("#decouple-traits");a&&(a.checked=e.decoupleTraits??!0)}async function generateAIForRow(e,{apiBase:a,apiKey:t,model:o,decoupleTraits:n},r){const i=e.filter(e=>e.include&&e.value),s={};for(const e of i)s[e.name]=e.value;const l=[{role:"system",content:["You are an expert prompt engineer for generative image models.","Given finalized NFT trait values, write ONE vivid, comma-separated prompt (60-120 words).","Do NOT change the provided trait values; keep them consistent. No trait labels, no quotes, no preambles.",n?"Treat each trait independently and do not try to harmonize or replace them for compatibility. Keep unusual or contradictory combinations as-is (e.g., cowboy hat with astronaut suit).":""].filter(Boolean).join(" ")},{role:"user",content:["Finalized traits JSON:",JSON.stringify(s,null,2),"","Uniqueness cues (influence style/mood/lighting/composition but keep traits consistent):",r||"","","Return ONLY strict JSON with shape:","{",'  "prompt": "One line prompt, no trait labels or quotes, no preamble"',"}"].join("\n")}],c=a.replace(/\/+$/,"")+"/chat/completions",u={"Content-Type":"application/json",...t?{Authorization:`Bearer ${t}`}:{}};if(/openrouter\.ai/i.test(a))try{let e=location.origin||"";/^https?:\/\//i.test(e)||(e="https://local.file"),u["HTTP-Referer"]=e,u["X-Title"]="NFT Traits AI Prompt Generator"}catch{u["HTTP-Referer"]="https://local.file",u["X-Title"]="NFT Traits AI Prompt Generator"}const d=await fetch(c,{method:"POST",headers:u,body:JSON.stringify({model:o,messages:l,temperature:.9,max_tokens:400})});if(!d.ok){const e=await d.text().catch(()=>"");throw new Error(`AI error ${d.status}: ${e.slice(0,400)}`)}const p=await d.json(),m=p.choices?.[0]?.message?.content?.trim();if(!m)throw new Error("AI returned empty content");let h=m;const g=m.match(/\{[\s\S]*\}/);let k;g&&(h=g[0]);try{k=JSON.parse(h)}catch{throw new Error("AI did not return valid JSON")}let f="string"==typeof k.prompt?k.prompt:"";return f=f.replace(/\s+/g," ").trim(),{prompt:f}}function heuristicPrompt(e,a){const t=e.filter(e=>e.include&&e.value),o=[],n=Object.fromEntries(t.map(e=>[e.name.toLowerCase(),e.value])),r=n.character||"character",i=n["body type"]?`${n["body type"]} body`:"",s=n["skin color"]?`${n["skin color"]} skin`:"",l=n.headwear&&"none"!==String(n.headwear).trim().toLowerCase()?`wearing ${n.headwear}`:"",c=n.hair||"",u=n.outfit||"",d=n.back?`back item: ${n.back}`:"",p=n.eyes?`eyes ${n.eyes}`:"",m=n.mouth?`mouth ${n.mouth}`:"",h=n.accessories?`accessories ${n.accessories}`:"",g=n["background color"]?`background ${n["background color"]}`:"",k=t.filter(e=>!["character","body type","skin color","headwear","hair","outfit","back","eyes","mouth","accessories","background color"].includes(e.name.toLowerCase())).map(e=>e.value).filter(Boolean).join(", ");return o.push(`${r}, ${i}, ${s}, ${l}, ${c}, ${u}`),o.push(`${d}, ${p}, ${m}, ${h}, ${g}`),k&&o.push(k),a&&o.push(a),o.push("high detail, crisp line art, subtle shading, studio lighting, volumetric light, soft shadows, vibrant yet balanced colors, clean composition, centered subject"),o.join(", ").replace(/\s+,/g,",").replace(/,+\s*,/g,", ").replace(/,\s*,/g,", ").replace(/\s{2,}/g," ").trim()}function buildFullPrompt(e,a){const t={};for(const e of a)e&&e.include&&(t[e.name]=e.value||"");const o=[];for(const a of e){const e=(t[a]||"").trim();""!==e&&"none"!==e.toLowerCase()&&("character"===String(a).toLowerCase()?o.push(e+" and just Change"):o.push(a+": "+e))}return o.join(", ")}function csvEscape(e){if(null==e)return"";const a=String(e);return/[",\n]/.test(a)?'"'+a.replace(/"/g,'""')+'"':a}function excelColumnLabel(e){let a="";for(;e>0;){const t=(e-1)%26;a=String.fromCharCode(65+t)+a,e=Math.floor((e-1)/26)}return a}function buildFullPromptFormula(e,a){const t=t=>{const o=e.indexOf(t);if(-1===o)return"";return excelColumnLabel(2+o)+String(a)},o=[],n=t("Character");n&&o.push(`IF(LEN(TRIM(${n}))=0,"",${n} & " and just Change")`);for(const a of e){if("Character"===a)continue;const e=t(a);if(!e)continue;const n=String(a).replace(/"/g,'""');o.push(`IF(OR(LEN(TRIM(${e}))=0,LOWER(TRIM(${e}))="none"),"",", ${n}: " & ${e})`)}return o.length?"="+o.join(" & "):""}function toCSV(e){if(!e.length)return"";const a=Object.keys(e[0]),t=[];t.push(a.map(csvEscape).join(","));for(const o of e)t.push(a.map(e=>csvEscape(o[e])).join(","));return t.join("\n")}function downloadCSV(e,a){const t=new Blob([a],{type:"text/csv;charset=utf-8;"}),o=URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download=e,document.body.appendChild(n),n.click(),n.remove(),URL.revokeObjectURL(o)}function log(e,a){const t=(new Date).toLocaleTimeString();a.textContent+=`[${t}] ${e}\n`,a.scrollTop=a.scrollHeight}function setProgress(e,a,t){const o=a?Math.round(e/a*100):0;t.style.width=o+"%"}async function bulkGenerate(){const e=qs("#progress-bar"),a=qs("#log");a.textContent="",setProgress(0,1,e);const t=Math.max(1,parseInt(qs("#bulk-count")?.value||"1",10)),o=loadSettings(),n=collectTraits();if(enforceMaskRule(n,!1),o.useAI&&!o.apiKey&&!o.allowFallback)return log("AI mode enabled but no API key; fallback not allowed. Aborting.",a),void alert("No API key provided. Disable AI mode or enable heuristic fallback, or enter an API key.");const r=n.filter(e=>e.include).map(e=>e.name),i=new Set,s=[],l=new Set,c=new Set(n.filter(e=>e.include&&(!e.value||"random"===String(e.value).trim().toLowerCase())).map(e=>e.name)),u=["Background Color","Pose","Accessories","Mouth","Eyes","Back","Headwear","Hair","Outfit","Skin Color","Body Type"],d=e=>String(e||"").toLowerCase().trim();function p(e){const a=Object.fromEntries(e.map(e=>[e.name,e.value]));return r.map(e=>d(a[e]||"")).join("||")}function m(e){let a=0,t=p(e);if(!l.has(t))return l.add(t),{working:e,duplicate:!1};const o=r.slice();for(o.sort((e,a)=>{const t=c.has(e)?0:1,o=c.has(a)?0:1;if(t!==o)return t-o;const n=u.indexOf(e),r=u.indexOf(a);return(-1===n?999:n)-(-1===r?999:r)});a<20;){const n=o[a%Math.max(1,o.length)],r=e.findIndex(e=>e.name===n);if(-1!==r){const a=e[r],t=d(a.value);if(!(c.size>0)||c.has(n)){let o=0;for(;o<10;){const n=maybeRandomizeValue(a.name,"random",!!a.weird);if(d(n)&&d(n)!==t){e[r]={...a,value:n};break}o++}enforceMaskRule(e,!1)}}if(t=p(e),!l.has(t))return l.add(t),{working:e,duplicate:!1};a++}return{working:e,duplicate:!0}}for(let l=0;l<t;l++)try{let c=n.map(e=>({...e})),u="";const d=buildUniquenessCue();let p=!1;if(o.useAI&&o.apiKey){c=prefillMissingTraits(c).traits,enforceMaskRule(c,!1);const e=m(c);c=e.working,p=e.duplicate;u=(await generateAIForRow(c,o,d)).prompt,log(`AI ✓ Row ${l+1}`,a)}else{c=fillTraitsHeuristic(c),enforceMaskRule(c,!1);const e=m(c);c=e.working,p=e.duplicate,u=heuristicPrompt(c,d),o.useAI&&!o.apiKey&&o.allowFallback?log(`AI key missing → Heuristic fallback used for Row ${l+1}`,a):log(`Heuristic ✓ Row ${l+1}`,a)}let h=normalizePrompt(u),g=0;for(;i.has(h)&&g<2;)u=heuristicPrompt(c,buildUniquenessCue()),h=normalizePrompt(u),g++;i.add(h);const k={id:l+1};for(const e of r){const a=c.find(a=>a.name===e);k[e]=a&&a.value||"",k[e]&&recordTraitUsage(e,k[e])}k.DUPLICATE=p?"DUPLICATE":"",k["Full Prompt"]=buildFullPromptFormula(r,l+2),k["AI Prompt"]=u,s.push(k),setProgress(l+1,t,e)}catch(e){log(`Error Row ${l+1}: ${e.message}`,a)}const h=s.length;if(h>0){const e={},a={},t=e=>String(e||"").toLowerCase(),o=e=>String(e||"").toLowerCase().trim();for(const a of s)for(const n of r){const r=a[n];if(!r)continue;const i=t(n),s=o(r);s&&(e[i]=e[i]||{},e[i][s]=(e[i][s]||0)+1)}for(const t of Object.keys(e)){a[t]={};for(const o of Object.keys(e[t]))a[t][o]=e[t][o]/h*100}const n=s.map((e,n)=>{let i=0;for(const n of r){const r=e[n];if(!r)continue;const s=t(n),l=o(r);i+=a[s]&&a[s][l]||0}return{idx:n,id:e.id||n+1,score:i}});n.sort((e,a)=>e.score-a.score||e.id-a.id);for(let e=1;e<=n.length;e++){const{idx:a}=n[e-1];s[a].RANKING=e}}const g=toCSV(s);g?(downloadCSV("nft_traits_prompts.csv",g),log("CSV downloaded.",a)):log("No data to export.",a),setProgress(t,t,e)}document.addEventListener("DOMContentLoaded",()=>{renderDefaultTraits(),restoreSettings(),qs("#add-trait-btn")?.addEventListener("click",()=>{const e=prompt("New trait name (e.g., additionaltraits):");if(!e)return;qs("#traits").appendChild(makeTraitRow({key:e.trim(),include:!0,weird:!1,placeholder:SUGGESTIONS[e]?.[0]||"Enter value..."}))}),qs("#fill-example-btn")?.addEventListener("click",()=>{fillExample(confirm("Also add additionaltraits: random?"))}),qs("#generate-prompt-btn")?.addEventListener("click",async()=>{const e=loadSettings();let a=collectTraits();enforceMaskRule(a,!0);const t=qs("#single-output"),o=qs("#log");if(e.useAI&&e.apiKey)try{const o=prefillMissingTraits(a);a=o.traits;const n=qsa('[data-row="trait"]');for(const e of n){const a=qs('[data-key="name"]',e).textContent.trim();if(o.filledMap[a]){const t=qs(".trait-value",e);t&&(t.value=o.filledMap[a])}}enforceMaskRule(a,!0);const r=await generateAIForRow(a,e,buildUniquenessCue());t&&(t.value=r.prompt)}catch(e){log(`Single AI generation failed: ${e.message} → using heuristic.`,o);const n=fillTraitsHeuristic(a);enforceMaskRule(n,!0);const r=qsa('[data-row="trait"]');for(const e of r){const a=qs('[data-key="name"]',e).textContent.trim(),t=qs(".trait-value",e),o=n.find(e=>e.name===a);if(o){const e=(t.value||"").trim();e&&"random"!==e.toLowerCase()||(t.value=o.value)}}t&&(t.value=generateSinglePrompt(n))}else{const e=fillTraitsHeuristic(a);enforceMaskRule(e,!0);const o=qsa('[data-row="trait"]');for(const a of o){const t=qs('[data-key="name"]',a).textContent.trim(),o=qs(".trait-value",a),n=e.find(e=>e.name===t);if(n){const e=(o.value||"").trim();e&&"random"!==e.toLowerCase()||(o.value=n.value)}}t&&(t.value=generateSinglePrompt(e))}}),qs("#bulk-generate-btn")?.addEventListener("click",()=>{bulkGenerate().catch(e=>{const a=qs("#log");log(`Bulk generation failed: ${e.message}`,a),alert("Bulk generation failed: "+e.message)})})});